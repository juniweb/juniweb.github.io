{"meta":{"title":"휘모리 블로그","subtitle":"development diary","description":null,"author":"HeeJun, Lim","url":"http://juniweb.github.io"},"pages":[],"posts":[{"title":"RocketChat 설치(CentOS)","slug":"rocketchat-install-centos","date":"2016-10-28T07:55:01.000Z","updated":"2016-10-31T04:41:15.237Z","comments":true,"path":"2016/10/","link":"","permalink":"http://juniweb.github.io/2016/10/","excerpt":"","text":"CentOS7 서버에 RocketChat 을 설치하는 방법에 대하여 정리한다. 서버 요구사항최소 요구사항 Single core (2 GHz) 1 GB RAM 30 GB of SSD 권장 요구사항 Dual core (2 GHz) 2 GB RAM 40 GB of SSD Step 1: 서버 UpdateRoot 로 로그인합니다.1sudo su - epel repository 를 추가하고, 시스템을 Update 합니다.1yum -y install epel-release &amp;&amp; yum -y update Step 2: MongoDB 설치MongoDB YUM repository 를 추가합니다.1vi /etc/yum.repos.d/mongodb.repo 파일에 다음 내용을 입력합니다.12345[mongodb]name=MongoDB Repositorybaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/gpgcheck=0enabled=1 파일을 저장하고 vi를 종료합니다.1:wq! MonogoDB 를 설치합니다.1yum install mongodb-org mongodb-org-server -y Step 3: Node.js, GraphicsMagick, npm 과 dependencies 설치node.js 와 npm 등을 설치합니다.1yum install -y nodejs curl GraphicsMagick npm gcc-c++ node.js 와 npm 이 설치되었으므로, dependencies 를 설치합니다.1npm install -g inherits n Rocket.Chat 에서 필요한 node.js 4.5 버전을 설치합니다. n 4.5 Step 4: Rocket 설치Rocket.Chat 을 다운로드하고 설치합니다.1234567891011121314cd /optcurl -L https://rocket.chat/releases/latest/download -o rocket.chat.tgztar zxvf rocket.chat.tgzmv bundle Rocket.Chatcd Rocket.Chat/programs/servernpm installcd ../..``` PORT, ROOT_URL 및 MONGO_URL 을 설정합니다. export PORT=3000export ROOT_URL=http://your-host-name.com-as-accessed-from-internet:3000/export MONGO_URL=mongodb://localhost:27017/rocketchat123&gt; **ROOT_URL** 에서 your-host-name.com-as-accessed-from-internet 는 DNS 이름 또는 IP 를 로 변경하여 사용.### Step 5: MongoDB 시작 chkconfig mongod on1MongoDB를 시작합니다. systemctl start mongod12### Step 6: Rocket.Chat 서비스 시작 node main.js1234567891011웹브라우저에서 Rocket.Chat 에 접속합니다. http://your-host-name.com-as-accessed-from-internet:3000/### Step 7: Rocket.Chat 서비스 등록(자동시작)systemd 에 RocketChat 서비스 설정[systemd에서 부팅시 실행할 서비스 관리하기 (CentOS 7)](https://www.conory.com/note_linux/42241) vi /usr/lib/systemd/system/rocketchat.service12파일에 다음 내용을 입력합니다. [Unit]Description=The Rocket.Chat serverAfter=network.target remote-fs.target nss-lookup.target nginx.target mongod.target[Service]ExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.jsStandardOutput=syslogStandardError=syslogSyslogIdentifier=rocketchatUser=rootEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat ROOT_URL=http://your-host-name.com-as-accessed-from-internet:3000/ PORT=3000[Install]WantedBy=multi-user.target1234&gt; **ROOT_URL** 에서 your-host-name.com-as-accessed-from-internet 는 DNS 이름 또는 IP 로 변경하여 사용RocketChat 서비스 활성화 systemctl enable rocketchat.service``` 참고Deploying Rocket.Chat on Centos 7 How to Install Rocket.Chat on CentOS 7","categories":[{"name":"OpenSource","slug":"OpenSource","permalink":"http://juniweb.github.io/categories/OpenSource/"},{"name":"RocketChat","slug":"OpenSource/RocketChat","permalink":"http://juniweb.github.io/categories/OpenSource/RocketChat/"}],"tags":[{"name":"RocketChat","slug":"RocketChat","permalink":"http://juniweb.github.io/tags/RocketChat/"},{"name":"Install","slug":"Install","permalink":"http://juniweb.github.io/tags/Install/"}],"keywords":[{"name":"OpenSource","slug":"OpenSource","permalink":"http://juniweb.github.io/categories/OpenSource/"},{"name":"RocketChat","slug":"OpenSource/RocketChat","permalink":"http://juniweb.github.io/categories/OpenSource/RocketChat/"}]},{"title":"Azure CentOS7 가상컴퓨터 생성","slug":"azure-centos7-create","date":"2016-10-28T05:38:52.000Z","updated":"2016-10-28T07:58:13.352Z","comments":true,"path":"2016/10/","link":"","permalink":"http://juniweb.github.io/2016/10/","excerpt":"","text":"Azure 에서 가상컴퓨터-CentOS 설치하는 방법에 대하여 정리한다. 먼저 Azure Portal 에 접속한다. Step 1: Resource 선택 - 가상컴퓨터새로 생성할 리소스(가상컴퓨터) 를 선택하고, +추가 버튼을 클릭 Step 2: VM 이미지 선택 - CentOS 7가상컴퓨터(Virtual Machine,VM)에 설치할 OS 이미지를 선택. 배포모델은 리소스 관리자, 클래식 두가지가 있다.배포모델에 대한 설명은 Azure Resource Manager 및 클래식 배포: 배포 모델 및 리소스 상태 이해 를 참조한다. Step 3: 가상컴퓨터 설정1. 기본사항가상컴퓨터 이름, 리소스 그룹, 사용자 이름과 암호 를 설정한다.리소스그룹은 Azure 리소스 관리자 개요 를 참조한다. SSH 공개키 방식은 openssl key 를 생성하여 등록하며, 다음 페이지를 참조한다.Generate and use a SSH Key with PuTTY and an Azure Linux VM 2. 크기가상컴퓨터 크기 를 설정한다. 3. 설정가상컴퓨터 의 도메인(클라우드서비스) 및 끝점(endpoint) 등을 설정한다. # 클라우드서비스 : 입력한 도메인이름으로 클라우드서비스를 생성한다.즉, 사이트 접속주소(URL) 는 http://도메인이름.cloudapp.net/ 이 된다. # 끝점 : 가상컴퓨터에 오픈할 Port 를 생성한다. 기본적으로 SSH(22) Port 가 생성되어 있다.HTTP 등의 서비스가 필요하면 끝점 추가 를 클릭하여, 끝점을 추가한다. 4. 요약가상컴퓨터를 배포하기 전, 설정에서 등록한 구성내용을 최종 점검한다.확인 버튼을 클릭하면 가상컴퓨터를 배포한다. Step 4: 가상컴퓨터 배포가상컴퓨터 배포를 시작하면, 알림을 통해 배포여부를 확인할 수 있다. 가상컴퓨터가 생성되면, 리소스그룹에서 확인할 수 있다.생성한 리소스그룹을 클릭하면 하위 리소스 목록을 표시한다. 리소스그룹을 삭제하면 하위 리소스는 모두 삭제된다. Step 5: 접속 확인터미널 접속 프로그램을 통해 서버에 접속한다. hostname : 도메인이름.cloudapp.net port : 22 참고Azure용 CentOS 기반 가상 컴퓨터 준비 Windows Azure에서 리눅스 가상머신을 생성하고 연결","categories":[{"name":"Cloud","slug":"Cloud","permalink":"http://juniweb.github.io/categories/Cloud/"},{"name":"Azure","slug":"Cloud/Azure","permalink":"http://juniweb.github.io/categories/Cloud/Azure/"}],"tags":[{"name":"azure","slug":"azure","permalink":"http://juniweb.github.io/tags/azure/"},{"name":"centos","slug":"centos","permalink":"http://juniweb.github.io/tags/centos/"}],"keywords":[{"name":"Cloud","slug":"Cloud","permalink":"http://juniweb.github.io/categories/Cloud/"},{"name":"Azure","slug":"Cloud/Azure","permalink":"http://juniweb.github.io/categories/Cloud/Azure/"}]},{"title":"Atom Editor Packages","slug":"atom-packages","date":"2016-10-27T00:26:42.000Z","updated":"2016-10-27T02:19:52.324Z","comments":true,"path":"2016/10/","link":"","permalink":"http://juniweb.github.io/2016/10/","excerpt":"","text":"Atom Editor 에서 사용하고 있는 Packages 정리 aligner쉽게 연산자 및 사용자 지정 구성에 대한 멀티라인 정렬 사용방법 ctrl-alt-/ angularjsAngularJS Syntax 자동완성 지원 atom-beautifyHTML, CSS, JavaScript, PHP, Python, Ruby, Java, C, C++, C#, Objective-C, CoffeeScript, TypeScript, Coldfusion, SQL 등의 코드를 예쁘게 정렬 사용방법Command Palette ctrl-shift-p 를 Open 하여, type Beautify and Beautify Editor 실행 Before After docblockrJavascript 주석을 쉽게 작성해주는 기능 사용방법/** 를 입력하고, Enter emmetWeb 개발을 위한 HTML, CSS 필수 Toolkit Emmet 사용법 highlight-column현재 Cursor의 Column을 강조 표시 highlight-line현재 Cursor의 Line을 강조 표시 highlight-selected더블클릭 시, 선택한 동일 단어 강조 표시 minimap전체 소스코드의 minimap 미리보기 project-manager자주 사용하는 Project 를 등록하고, Project 목록으로 Open 을 편리하게 한다. 사용방법List Projectsalt-shift-P 하여, Project 선택 Save ProjectsCommand Palette ctrl-shift-p 를 Open 하여, Project Manger:Save Project 선택 Edit ProjectsCommand Palette ctrl-shift-p 를 Open 하여, Project Manger:Edit Project 선택 scriptAtom Ediotr 에서 Script 실행 사용방법Command Palette ctrl-shift-p 를 Open 하여, Script: Run 선택 Sublime Style Column SelectionSublime 스타일의 ‘Column Selection’ 을 사용하여, 행의 선택하여 편집 가능 사용방법alt 를 누르고, 마우스 Left 를 클릭하여 Line 선택 swackets중괄호에 색상을 부여하여 표시 todo-showProject 또는 File 에서 “TODO, FIXME, CHANGED, XXX, IDEA, HACK, NOTE, REVIEW” 를 찾아서 표시 사용방법Command Palette ctrl-shift-p 를 Open 하여, Todo Show: Find In Project 또는 Todo Show: Find In Open Files 선택","categories":[{"name":"기타","slug":"기타","permalink":"http://juniweb.github.io/categories/기타/"},{"name":"editor","slug":"기타/editor","permalink":"http://juniweb.github.io/categories/기타/editor/"}],"tags":[{"name":"atom","slug":"atom","permalink":"http://juniweb.github.io/tags/atom/"},{"name":"package","slug":"package","permalink":"http://juniweb.github.io/tags/package/"}],"keywords":[{"name":"기타","slug":"기타","permalink":"http://juniweb.github.io/categories/기타/"},{"name":"editor","slug":"기타/editor","permalink":"http://juniweb.github.io/categories/기타/editor/"}]},{"title":"hexo","slug":"hexo","date":"2016-09-24T05:28:16.000Z","updated":"2016-09-24T05:36:10.711Z","comments":true,"path":"2016/09/","link":"","permalink":"http://juniweb.github.io/2016/09/","excerpt":"","text":"Hexo 블로그 참조Eric Han’s IT Blog using Hexo","categories":[{"name":"기타","slug":"기타","permalink":"http://juniweb.github.io/categories/기타/"},{"name":"Hexo","slug":"기타/Hexo","permalink":"http://juniweb.github.io/categories/기타/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://juniweb.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://juniweb.github.io/tags/blog/"}],"keywords":[{"name":"기타","slug":"기타","permalink":"http://juniweb.github.io/categories/기타/"},{"name":"Hexo","slug":"기타/Hexo","permalink":"http://juniweb.github.io/categories/기타/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-07-12T08:38:53.179Z","updated":"2016-09-24T05:19:35.088Z","comments":true,"path":"2016/07/","link":"","permalink":"http://juniweb.github.io/2016/07/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}